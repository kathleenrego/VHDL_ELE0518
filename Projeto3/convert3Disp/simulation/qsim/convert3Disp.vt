// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2019 21:45:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    convert3Disp
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module convert3Disp_vlg_sample_tst(
	num1,
	sampler_tx
);
input [7:0] num1;
output sampler_tx;

reg sample;
time current_time;
always @(num1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module convert3Disp_vlg_check_tst (
	disp_0,
	disp_1,
	disp_2,
	sampler_rx
);
input [6:0] disp_0;
input [6:0] disp_1;
input [6:0] disp_2;
input sampler_rx;

reg [6:0] disp_0_expected;
reg [6:0] disp_1_expected;
reg [6:0] disp_2_expected;

reg [6:0] disp_0_prev;
reg [6:0] disp_1_prev;
reg [6:0] disp_2_prev;

reg [6:0] disp_0_expected_prev;
reg [6:0] disp_1_expected_prev;
reg [6:0] disp_2_expected_prev;

reg [6:0] last_disp_0_exp;
reg [6:0] last_disp_1_exp;
reg [6:0] last_disp_2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	disp_0_prev = disp_0;
	disp_1_prev = disp_1;
	disp_2_prev = disp_2;
end

// update expected /o prevs

always @(trigger)
begin
	disp_0_expected_prev = disp_0_expected;
	disp_1_expected_prev = disp_1_expected;
	disp_2_expected_prev = disp_2_expected;
end


// expected disp_0[ 6 ]
initial
begin
	disp_0_expected[6] = 1'bX;
end 
// expected disp_0[ 5 ]
initial
begin
	disp_0_expected[5] = 1'bX;
end 
// expected disp_0[ 4 ]
initial
begin
	disp_0_expected[4] = 1'bX;
end 
// expected disp_0[ 3 ]
initial
begin
	disp_0_expected[3] = 1'bX;
end 
// expected disp_0[ 2 ]
initial
begin
	disp_0_expected[2] = 1'bX;
end 
// expected disp_0[ 1 ]
initial
begin
	disp_0_expected[1] = 1'bX;
end 
// expected disp_0[ 0 ]
initial
begin
	disp_0_expected[0] = 1'bX;
end 
// expected disp_1[ 6 ]
initial
begin
	disp_1_expected[6] = 1'bX;
end 
// expected disp_1[ 5 ]
initial
begin
	disp_1_expected[5] = 1'bX;
end 
// expected disp_1[ 4 ]
initial
begin
	disp_1_expected[4] = 1'bX;
end 
// expected disp_1[ 3 ]
initial
begin
	disp_1_expected[3] = 1'bX;
end 
// expected disp_1[ 2 ]
initial
begin
	disp_1_expected[2] = 1'bX;
end 
// expected disp_1[ 1 ]
initial
begin
	disp_1_expected[1] = 1'bX;
end 
// expected disp_1[ 0 ]
initial
begin
	disp_1_expected[0] = 1'bX;
end 
// expected disp_2[ 6 ]
initial
begin
	disp_2_expected[6] = 1'bX;
end 
// expected disp_2[ 5 ]
initial
begin
	disp_2_expected[5] = 1'bX;
end 
// expected disp_2[ 4 ]
initial
begin
	disp_2_expected[4] = 1'bX;
end 
// expected disp_2[ 3 ]
initial
begin
	disp_2_expected[3] = 1'bX;
end 
// expected disp_2[ 2 ]
initial
begin
	disp_2_expected[2] = 1'bX;
end 
// expected disp_2[ 1 ]
initial
begin
	disp_2_expected[1] = 1'bX;
end 
// expected disp_2[ 0 ]
initial
begin
	disp_2_expected[0] = 1'bX;
end 
// generate trigger
always @(disp_0_expected or disp_0 or disp_1_expected or disp_1 or disp_2_expected or disp_2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected disp_0 = %b | expected disp_1 = %b | expected disp_2 = %b | ",disp_0_expected_prev,disp_1_expected_prev,disp_2_expected_prev);
	$display("| real disp_0 = %b | real disp_1 = %b | real disp_2 = %b | ",disp_0_prev,disp_1_prev,disp_2_prev);
`endif
	if (
		( disp_0_expected_prev[0] !== 1'bx ) && ( disp_0_prev[0] !== disp_0_expected_prev[0] )
		&& ((disp_0_expected_prev[0] !== last_disp_0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_0_expected_prev);
		$display ("     Real value = %b", disp_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_0_exp[0] = disp_0_expected_prev[0];
	end
	if (
		( disp_0_expected_prev[1] !== 1'bx ) && ( disp_0_prev[1] !== disp_0_expected_prev[1] )
		&& ((disp_0_expected_prev[1] !== last_disp_0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_0_expected_prev);
		$display ("     Real value = %b", disp_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_0_exp[1] = disp_0_expected_prev[1];
	end
	if (
		( disp_0_expected_prev[2] !== 1'bx ) && ( disp_0_prev[2] !== disp_0_expected_prev[2] )
		&& ((disp_0_expected_prev[2] !== last_disp_0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_0_expected_prev);
		$display ("     Real value = %b", disp_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_0_exp[2] = disp_0_expected_prev[2];
	end
	if (
		( disp_0_expected_prev[3] !== 1'bx ) && ( disp_0_prev[3] !== disp_0_expected_prev[3] )
		&& ((disp_0_expected_prev[3] !== last_disp_0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_0_expected_prev);
		$display ("     Real value = %b", disp_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_0_exp[3] = disp_0_expected_prev[3];
	end
	if (
		( disp_0_expected_prev[4] !== 1'bx ) && ( disp_0_prev[4] !== disp_0_expected_prev[4] )
		&& ((disp_0_expected_prev[4] !== last_disp_0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_0_expected_prev);
		$display ("     Real value = %b", disp_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_0_exp[4] = disp_0_expected_prev[4];
	end
	if (
		( disp_0_expected_prev[5] !== 1'bx ) && ( disp_0_prev[5] !== disp_0_expected_prev[5] )
		&& ((disp_0_expected_prev[5] !== last_disp_0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_0_expected_prev);
		$display ("     Real value = %b", disp_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_0_exp[5] = disp_0_expected_prev[5];
	end
	if (
		( disp_0_expected_prev[6] !== 1'bx ) && ( disp_0_prev[6] !== disp_0_expected_prev[6] )
		&& ((disp_0_expected_prev[6] !== last_disp_0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_0_expected_prev);
		$display ("     Real value = %b", disp_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_0_exp[6] = disp_0_expected_prev[6];
	end
	if (
		( disp_1_expected_prev[0] !== 1'bx ) && ( disp_1_prev[0] !== disp_1_expected_prev[0] )
		&& ((disp_1_expected_prev[0] !== last_disp_1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_1_expected_prev);
		$display ("     Real value = %b", disp_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_1_exp[0] = disp_1_expected_prev[0];
	end
	if (
		( disp_1_expected_prev[1] !== 1'bx ) && ( disp_1_prev[1] !== disp_1_expected_prev[1] )
		&& ((disp_1_expected_prev[1] !== last_disp_1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_1_expected_prev);
		$display ("     Real value = %b", disp_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_1_exp[1] = disp_1_expected_prev[1];
	end
	if (
		( disp_1_expected_prev[2] !== 1'bx ) && ( disp_1_prev[2] !== disp_1_expected_prev[2] )
		&& ((disp_1_expected_prev[2] !== last_disp_1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_1_expected_prev);
		$display ("     Real value = %b", disp_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_1_exp[2] = disp_1_expected_prev[2];
	end
	if (
		( disp_1_expected_prev[3] !== 1'bx ) && ( disp_1_prev[3] !== disp_1_expected_prev[3] )
		&& ((disp_1_expected_prev[3] !== last_disp_1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_1_expected_prev);
		$display ("     Real value = %b", disp_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_1_exp[3] = disp_1_expected_prev[3];
	end
	if (
		( disp_1_expected_prev[4] !== 1'bx ) && ( disp_1_prev[4] !== disp_1_expected_prev[4] )
		&& ((disp_1_expected_prev[4] !== last_disp_1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_1_expected_prev);
		$display ("     Real value = %b", disp_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_1_exp[4] = disp_1_expected_prev[4];
	end
	if (
		( disp_1_expected_prev[5] !== 1'bx ) && ( disp_1_prev[5] !== disp_1_expected_prev[5] )
		&& ((disp_1_expected_prev[5] !== last_disp_1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_1_expected_prev);
		$display ("     Real value = %b", disp_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_1_exp[5] = disp_1_expected_prev[5];
	end
	if (
		( disp_1_expected_prev[6] !== 1'bx ) && ( disp_1_prev[6] !== disp_1_expected_prev[6] )
		&& ((disp_1_expected_prev[6] !== last_disp_1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_1_expected_prev);
		$display ("     Real value = %b", disp_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_1_exp[6] = disp_1_expected_prev[6];
	end
	if (
		( disp_2_expected_prev[0] !== 1'bx ) && ( disp_2_prev[0] !== disp_2_expected_prev[0] )
		&& ((disp_2_expected_prev[0] !== last_disp_2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_2_expected_prev);
		$display ("     Real value = %b", disp_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_2_exp[0] = disp_2_expected_prev[0];
	end
	if (
		( disp_2_expected_prev[1] !== 1'bx ) && ( disp_2_prev[1] !== disp_2_expected_prev[1] )
		&& ((disp_2_expected_prev[1] !== last_disp_2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_2_expected_prev);
		$display ("     Real value = %b", disp_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_2_exp[1] = disp_2_expected_prev[1];
	end
	if (
		( disp_2_expected_prev[2] !== 1'bx ) && ( disp_2_prev[2] !== disp_2_expected_prev[2] )
		&& ((disp_2_expected_prev[2] !== last_disp_2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_2_expected_prev);
		$display ("     Real value = %b", disp_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_2_exp[2] = disp_2_expected_prev[2];
	end
	if (
		( disp_2_expected_prev[3] !== 1'bx ) && ( disp_2_prev[3] !== disp_2_expected_prev[3] )
		&& ((disp_2_expected_prev[3] !== last_disp_2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_2_expected_prev);
		$display ("     Real value = %b", disp_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_2_exp[3] = disp_2_expected_prev[3];
	end
	if (
		( disp_2_expected_prev[4] !== 1'bx ) && ( disp_2_prev[4] !== disp_2_expected_prev[4] )
		&& ((disp_2_expected_prev[4] !== last_disp_2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_2_expected_prev);
		$display ("     Real value = %b", disp_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_2_exp[4] = disp_2_expected_prev[4];
	end
	if (
		( disp_2_expected_prev[5] !== 1'bx ) && ( disp_2_prev[5] !== disp_2_expected_prev[5] )
		&& ((disp_2_expected_prev[5] !== last_disp_2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_2_expected_prev);
		$display ("     Real value = %b", disp_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_2_exp[5] = disp_2_expected_prev[5];
	end
	if (
		( disp_2_expected_prev[6] !== 1'bx ) && ( disp_2_prev[6] !== disp_2_expected_prev[6] )
		&& ((disp_2_expected_prev[6] !== last_disp_2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_2_expected_prev);
		$display ("     Real value = %b", disp_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_2_exp[6] = disp_2_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module convert3Disp_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] num1;
// wires                                               
wire [6:0] disp_0;
wire [6:0] disp_1;
wire [6:0] disp_2;

wire sampler;                             

// assign statements (if any)                          
convert3Disp i1 (
// port map - connection between master ports and signals/registers   
	.disp_0(disp_0),
	.disp_1(disp_1),
	.disp_2(disp_2),
	.num1(num1)
);
// num1[ 7 ]
initial
begin
	num1[7] = 1'b1;
end 
// num1[ 6 ]
initial
begin
	num1[6] = 1'b0;
	num1[6] = #40000 1'b1;
end 
// num1[ 5 ]
initial
begin
	num1[5] = 1'b1;
	num1[5] = #40000 1'b0;
	num1[5] = #640000 1'b1;
end 
// num1[ 4 ]
initial
begin
	num1[4] = 1'b1;
	num1[4] = #40000 1'b0;
	num1[4] = #320000 1'b1;
	num1[4] = #320000 1'b0;
end 
// num1[ 3 ]
initial
begin
	num1[3] = 1'b1;
	# 40000;
	repeat(3)
	begin
		num1[3] = 1'b0;
		num1[3] = #160000 1'b1;
		# 160000;
	end
end 
// num1[ 2 ]
initial
begin
	num1[2] = 1'b1;
	# 40000;
	repeat(6)
	begin
		num1[2] = 1'b0;
		num1[2] = #80000 1'b1;
		# 80000;
	end
end 
// num1[ 1 ]
initial
begin
	repeat(12)
	begin
		num1[1] = 1'b1;
		num1[1] = #40000 1'b0;
		# 40000;
	end
	num1[1] = 1'b1;
end 
// num1[ 0 ]
always
begin
	num1[0] = 1'b0;
	num1[0] = #20000 1'b1;
	#20000;
end 

convert3Disp_vlg_sample_tst tb_sample (
	.num1(num1),
	.sampler_tx(sampler)
);

convert3Disp_vlg_check_tst tb_out(
	.disp_0(disp_0),
	.disp_1(disp_1),
	.disp_2(disp_2),
	.sampler_rx(sampler)
);
endmodule

