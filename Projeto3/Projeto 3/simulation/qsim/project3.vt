// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/07/2019 16:25:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    project3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module project3_vlg_sample_tst(
	c,
	clk,
	numIn,
	op,
	rst,
	sampler_tx
);
input  c;
input  clk;
input [4:0] numIn;
input [2:0] op;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(c or clk or numIn or op or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module project3_vlg_check_tst (
	Disp0,
	Disp1,
	Disp2,
	led,
	stateCode,
	sampler_rx
);
input [6:0] Disp0;
input [6:0] Disp1;
input [6:0] Disp2;
input [3:0] led;
input [3:0] stateCode;
input sampler_rx;

reg [6:0] Disp0_expected;
reg [6:0] Disp1_expected;
reg [6:0] Disp2_expected;
reg [3:0] led_expected;
reg [3:0] stateCode_expected;

reg [6:0] Disp0_prev;
reg [6:0] Disp1_prev;
reg [6:0] Disp2_prev;
reg [3:0] led_prev;
reg [3:0] stateCode_prev;

reg [6:0] Disp0_expected_prev;
reg [6:0] Disp1_expected_prev;
reg [6:0] Disp2_expected_prev;
reg [3:0] led_expected_prev;
reg [3:0] stateCode_expected_prev;

reg [6:0] last_Disp0_exp;
reg [6:0] last_Disp1_exp;
reg [6:0] last_Disp2_exp;
reg [3:0] last_led_exp;
reg [3:0] last_stateCode_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Disp0_prev = Disp0;
	Disp1_prev = Disp1;
	Disp2_prev = Disp2;
	led_prev = led;
	stateCode_prev = stateCode;
end

// update expected /o prevs

always @(trigger)
begin
	Disp0_expected_prev = Disp0_expected;
	Disp1_expected_prev = Disp1_expected;
	Disp2_expected_prev = Disp2_expected;
	led_expected_prev = led_expected;
	stateCode_expected_prev = stateCode_expected;
end


// expected Disp2[ 6 ]
initial
begin
	Disp2_expected[6] = 1'bX;
end 
// expected Disp2[ 5 ]
initial
begin
	Disp2_expected[5] = 1'bX;
end 
// expected Disp2[ 4 ]
initial
begin
	Disp2_expected[4] = 1'bX;
end 
// expected Disp2[ 3 ]
initial
begin
	Disp2_expected[3] = 1'bX;
end 
// expected Disp2[ 2 ]
initial
begin
	Disp2_expected[2] = 1'bX;
end 
// expected Disp2[ 1 ]
initial
begin
	Disp2_expected[1] = 1'bX;
end 
// expected Disp2[ 0 ]
initial
begin
	Disp2_expected[0] = 1'bX;
end 
// expected Disp1[ 6 ]
initial
begin
	Disp1_expected[6] = 1'bX;
end 
// expected Disp1[ 5 ]
initial
begin
	Disp1_expected[5] = 1'bX;
end 
// expected Disp1[ 4 ]
initial
begin
	Disp1_expected[4] = 1'bX;
end 
// expected Disp1[ 3 ]
initial
begin
	Disp1_expected[3] = 1'bX;
end 
// expected Disp1[ 2 ]
initial
begin
	Disp1_expected[2] = 1'bX;
end 
// expected Disp1[ 1 ]
initial
begin
	Disp1_expected[1] = 1'bX;
end 
// expected Disp1[ 0 ]
initial
begin
	Disp1_expected[0] = 1'bX;
end 
// expected Disp0[ 6 ]
initial
begin
	Disp0_expected[6] = 1'bX;
end 
// expected Disp0[ 5 ]
initial
begin
	Disp0_expected[5] = 1'bX;
end 
// expected Disp0[ 4 ]
initial
begin
	Disp0_expected[4] = 1'bX;
end 
// expected Disp0[ 3 ]
initial
begin
	Disp0_expected[3] = 1'bX;
end 
// expected Disp0[ 2 ]
initial
begin
	Disp0_expected[2] = 1'bX;
end 
// expected Disp0[ 1 ]
initial
begin
	Disp0_expected[1] = 1'bX;
end 
// expected Disp0[ 0 ]
initial
begin
	Disp0_expected[0] = 1'bX;
end 
// expected led[ 3 ]
initial
begin
	led_expected[3] = 1'bX;
end 
// expected led[ 2 ]
initial
begin
	led_expected[2] = 1'bX;
end 
// expected led[ 1 ]
initial
begin
	led_expected[1] = 1'bX;
end 
// expected led[ 0 ]
initial
begin
	led_expected[0] = 1'bX;
end 
// expected stateCode[ 3 ]
initial
begin
	stateCode_expected[3] = 1'bX;
end 
// expected stateCode[ 2 ]
initial
begin
	stateCode_expected[2] = 1'bX;
end 
// expected stateCode[ 1 ]
initial
begin
	stateCode_expected[1] = 1'bX;
end 
// expected stateCode[ 0 ]
initial
begin
	stateCode_expected[0] = 1'bX;
end 
// generate trigger
always @(Disp0_expected or Disp0 or Disp1_expected or Disp1 or Disp2_expected or Disp2 or led_expected or led or stateCode_expected or stateCode)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Disp0 = %b | expected Disp1 = %b | expected Disp2 = %b | expected led = %b | expected stateCode = %b | ",Disp0_expected_prev,Disp1_expected_prev,Disp2_expected_prev,led_expected_prev,stateCode_expected_prev);
	$display("| real Disp0 = %b | real Disp1 = %b | real Disp2 = %b | real led = %b | real stateCode = %b | ",Disp0_prev,Disp1_prev,Disp2_prev,led_prev,stateCode_prev);
`endif
	if (
		( Disp0_expected_prev[0] !== 1'bx ) && ( Disp0_prev[0] !== Disp0_expected_prev[0] )
		&& ((Disp0_expected_prev[0] !== last_Disp0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp0_expected_prev);
		$display ("     Real value = %b", Disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Disp0_exp[0] = Disp0_expected_prev[0];
	end
	if (
		( Disp0_expected_prev[1] !== 1'bx ) && ( Disp0_prev[1] !== Disp0_expected_prev[1] )
		&& ((Disp0_expected_prev[1] !== last_Disp0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp0_expected_prev);
		$display ("     Real value = %b", Disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Disp0_exp[1] = Disp0_expected_prev[1];
	end
	if (
		( Disp0_expected_prev[2] !== 1'bx ) && ( Disp0_prev[2] !== Disp0_expected_prev[2] )
		&& ((Disp0_expected_prev[2] !== last_Disp0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp0_expected_prev);
		$display ("     Real value = %b", Disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Disp0_exp[2] = Disp0_expected_prev[2];
	end
	if (
		( Disp0_expected_prev[3] !== 1'bx ) && ( Disp0_prev[3] !== Disp0_expected_prev[3] )
		&& ((Disp0_expected_prev[3] !== last_Disp0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp0_expected_prev);
		$display ("     Real value = %b", Disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Disp0_exp[3] = Disp0_expected_prev[3];
	end
	if (
		( Disp0_expected_prev[4] !== 1'bx ) && ( Disp0_prev[4] !== Disp0_expected_prev[4] )
		&& ((Disp0_expected_prev[4] !== last_Disp0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp0_expected_prev);
		$display ("     Real value = %b", Disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Disp0_exp[4] = Disp0_expected_prev[4];
	end
	if (
		( Disp0_expected_prev[5] !== 1'bx ) && ( Disp0_prev[5] !== Disp0_expected_prev[5] )
		&& ((Disp0_expected_prev[5] !== last_Disp0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp0_expected_prev);
		$display ("     Real value = %b", Disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Disp0_exp[5] = Disp0_expected_prev[5];
	end
	if (
		( Disp0_expected_prev[6] !== 1'bx ) && ( Disp0_prev[6] !== Disp0_expected_prev[6] )
		&& ((Disp0_expected_prev[6] !== last_Disp0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp0_expected_prev);
		$display ("     Real value = %b", Disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Disp0_exp[6] = Disp0_expected_prev[6];
	end
	if (
		( Disp1_expected_prev[0] !== 1'bx ) && ( Disp1_prev[0] !== Disp1_expected_prev[0] )
		&& ((Disp1_expected_prev[0] !== last_Disp1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp1_expected_prev);
		$display ("     Real value = %b", Disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Disp1_exp[0] = Disp1_expected_prev[0];
	end
	if (
		( Disp1_expected_prev[1] !== 1'bx ) && ( Disp1_prev[1] !== Disp1_expected_prev[1] )
		&& ((Disp1_expected_prev[1] !== last_Disp1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp1_expected_prev);
		$display ("     Real value = %b", Disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Disp1_exp[1] = Disp1_expected_prev[1];
	end
	if (
		( Disp1_expected_prev[2] !== 1'bx ) && ( Disp1_prev[2] !== Disp1_expected_prev[2] )
		&& ((Disp1_expected_prev[2] !== last_Disp1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp1_expected_prev);
		$display ("     Real value = %b", Disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Disp1_exp[2] = Disp1_expected_prev[2];
	end
	if (
		( Disp1_expected_prev[3] !== 1'bx ) && ( Disp1_prev[3] !== Disp1_expected_prev[3] )
		&& ((Disp1_expected_prev[3] !== last_Disp1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp1_expected_prev);
		$display ("     Real value = %b", Disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Disp1_exp[3] = Disp1_expected_prev[3];
	end
	if (
		( Disp1_expected_prev[4] !== 1'bx ) && ( Disp1_prev[4] !== Disp1_expected_prev[4] )
		&& ((Disp1_expected_prev[4] !== last_Disp1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp1_expected_prev);
		$display ("     Real value = %b", Disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Disp1_exp[4] = Disp1_expected_prev[4];
	end
	if (
		( Disp1_expected_prev[5] !== 1'bx ) && ( Disp1_prev[5] !== Disp1_expected_prev[5] )
		&& ((Disp1_expected_prev[5] !== last_Disp1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp1_expected_prev);
		$display ("     Real value = %b", Disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Disp1_exp[5] = Disp1_expected_prev[5];
	end
	if (
		( Disp1_expected_prev[6] !== 1'bx ) && ( Disp1_prev[6] !== Disp1_expected_prev[6] )
		&& ((Disp1_expected_prev[6] !== last_Disp1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp1_expected_prev);
		$display ("     Real value = %b", Disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Disp1_exp[6] = Disp1_expected_prev[6];
	end
	if (
		( Disp2_expected_prev[0] !== 1'bx ) && ( Disp2_prev[0] !== Disp2_expected_prev[0] )
		&& ((Disp2_expected_prev[0] !== last_Disp2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp2_expected_prev);
		$display ("     Real value = %b", Disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Disp2_exp[0] = Disp2_expected_prev[0];
	end
	if (
		( Disp2_expected_prev[1] !== 1'bx ) && ( Disp2_prev[1] !== Disp2_expected_prev[1] )
		&& ((Disp2_expected_prev[1] !== last_Disp2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp2_expected_prev);
		$display ("     Real value = %b", Disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Disp2_exp[1] = Disp2_expected_prev[1];
	end
	if (
		( Disp2_expected_prev[2] !== 1'bx ) && ( Disp2_prev[2] !== Disp2_expected_prev[2] )
		&& ((Disp2_expected_prev[2] !== last_Disp2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp2_expected_prev);
		$display ("     Real value = %b", Disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Disp2_exp[2] = Disp2_expected_prev[2];
	end
	if (
		( Disp2_expected_prev[3] !== 1'bx ) && ( Disp2_prev[3] !== Disp2_expected_prev[3] )
		&& ((Disp2_expected_prev[3] !== last_Disp2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp2_expected_prev);
		$display ("     Real value = %b", Disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Disp2_exp[3] = Disp2_expected_prev[3];
	end
	if (
		( Disp2_expected_prev[4] !== 1'bx ) && ( Disp2_prev[4] !== Disp2_expected_prev[4] )
		&& ((Disp2_expected_prev[4] !== last_Disp2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp2_expected_prev);
		$display ("     Real value = %b", Disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Disp2_exp[4] = Disp2_expected_prev[4];
	end
	if (
		( Disp2_expected_prev[5] !== 1'bx ) && ( Disp2_prev[5] !== Disp2_expected_prev[5] )
		&& ((Disp2_expected_prev[5] !== last_Disp2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp2_expected_prev);
		$display ("     Real value = %b", Disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Disp2_exp[5] = Disp2_expected_prev[5];
	end
	if (
		( Disp2_expected_prev[6] !== 1'bx ) && ( Disp2_prev[6] !== Disp2_expected_prev[6] )
		&& ((Disp2_expected_prev[6] !== last_Disp2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp2_expected_prev);
		$display ("     Real value = %b", Disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Disp2_exp[6] = Disp2_expected_prev[6];
	end
	if (
		( led_expected_prev[0] !== 1'bx ) && ( led_prev[0] !== led_expected_prev[0] )
		&& ((led_expected_prev[0] !== last_led_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_exp[0] = led_expected_prev[0];
	end
	if (
		( led_expected_prev[1] !== 1'bx ) && ( led_prev[1] !== led_expected_prev[1] )
		&& ((led_expected_prev[1] !== last_led_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_exp[1] = led_expected_prev[1];
	end
	if (
		( led_expected_prev[2] !== 1'bx ) && ( led_prev[2] !== led_expected_prev[2] )
		&& ((led_expected_prev[2] !== last_led_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_exp[2] = led_expected_prev[2];
	end
	if (
		( led_expected_prev[3] !== 1'bx ) && ( led_prev[3] !== led_expected_prev[3] )
		&& ((led_expected_prev[3] !== last_led_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_exp[3] = led_expected_prev[3];
	end
	if (
		( stateCode_expected_prev[0] !== 1'bx ) && ( stateCode_prev[0] !== stateCode_expected_prev[0] )
		&& ((stateCode_expected_prev[0] !== last_stateCode_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stateCode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stateCode_expected_prev);
		$display ("     Real value = %b", stateCode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_stateCode_exp[0] = stateCode_expected_prev[0];
	end
	if (
		( stateCode_expected_prev[1] !== 1'bx ) && ( stateCode_prev[1] !== stateCode_expected_prev[1] )
		&& ((stateCode_expected_prev[1] !== last_stateCode_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stateCode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stateCode_expected_prev);
		$display ("     Real value = %b", stateCode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_stateCode_exp[1] = stateCode_expected_prev[1];
	end
	if (
		( stateCode_expected_prev[2] !== 1'bx ) && ( stateCode_prev[2] !== stateCode_expected_prev[2] )
		&& ((stateCode_expected_prev[2] !== last_stateCode_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stateCode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stateCode_expected_prev);
		$display ("     Real value = %b", stateCode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_stateCode_exp[2] = stateCode_expected_prev[2];
	end
	if (
		( stateCode_expected_prev[3] !== 1'bx ) && ( stateCode_prev[3] !== stateCode_expected_prev[3] )
		&& ((stateCode_expected_prev[3] !== last_stateCode_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stateCode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stateCode_expected_prev);
		$display ("     Real value = %b", stateCode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_stateCode_exp[3] = stateCode_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module project3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg c;
reg clk;
reg [4:0] numIn;
reg [2:0] op;
reg rst;
// wires                                               
wire [6:0] Disp0;
wire [6:0] Disp1;
wire [6:0] Disp2;
wire [3:0] led;
wire [3:0] stateCode;

wire sampler;                             

// assign statements (if any)                          
project3 i1 (
// port map - connection between master ports and signals/registers   
	.c(c),
	.clk(clk),
	.Disp0(Disp0),
	.Disp1(Disp1),
	.Disp2(Disp2),
	.led(led),
	.numIn(numIn),
	.op(op),
	.rst(rst),
	.stateCode(stateCode)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #100000 1'b1;
	rst = #10000 1'b0;
	rst = #40000 1'b1;
	rst = #10000 1'b0;
	rst = #110000 1'b1;
	rst = #10000 1'b0;
	rst = #210000 1'b1;
	rst = #10000 1'b0;
	rst = #110000 1'b1;
	rst = #10000 1'b0;
	rst = #110000 1'b1;
	rst = #10000 1'b0;
end 

// c
initial
begin
	c = 1'b0;
	c = #20000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
	c = #60000 1'b1;
	c = #10000 1'b0;
	c = #50000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
	c = #170000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
	c = #70000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
	c = #70000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
	c = #70000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
	c = #10000 1'b1;
	c = #10000 1'b0;
end 
// numIn[ 4 ]
initial
begin
	numIn[4] = 1'b0;
	numIn[4] = #10000 1'b1;
	numIn[4] = #20000 1'b0;
	numIn[4] = #90000 1'b1;
	numIn[4] = #40000 1'b0;
	numIn[4] = #20000 1'b1;
	numIn[4] = #40000 1'b0;
	numIn[4] = #200000 1'b1;
	numIn[4] = #20000 1'b0;
	numIn[4] = #80000 1'b1;
	numIn[4] = #40000 1'b0;
	numIn[4] = #80000 1'b1;
	numIn[4] = #40000 1'b0;
	numIn[4] = #80000 1'b1;
	numIn[4] = #20000 1'b0;
end 
// numIn[ 3 ]
initial
begin
	numIn[3] = 1'b0;
	numIn[3] = #30000 1'b1;
	numIn[3] = #20000 1'b0;
	numIn[3] = #70000 1'b1;
	numIn[3] = #40000 1'b0;
	numIn[3] = #260000 1'b1;
	numIn[3] = #20000 1'b0;
	numIn[3] = #200000 1'b1;
	numIn[3] = #40000 1'b0;
	numIn[3] = #80000 1'b1;
	numIn[3] = #20000 1'b0;
end 
// numIn[ 2 ]
initial
begin
	numIn[2] = 1'b0;
	numIn[2] = #10000 1'b1;
	numIn[2] = #20000 1'b0;
	numIn[2] = #90000 1'b1;
	numIn[2] = #40000 1'b0;
	numIn[2] = #40000 1'b1;
	numIn[2] = #20000 1'b0;
	numIn[2] = #200000 1'b1;
	numIn[2] = #20000 1'b0;
	numIn[2] = #200000 1'b1;
	numIn[2] = #40000 1'b0;
	numIn[2] = #80000 1'b1;
	numIn[2] = #40000 1'b0;
end 
// numIn[ 1 ]
initial
begin
	numIn[1] = 1'b0;
	numIn[1] = #30000 1'b1;
	numIn[1] = #20000 1'b0;
	numIn[1] = #70000 1'b1;
	numIn[1] = #40000 1'b0;
	numIn[1] = #20000 1'b1;
	numIn[1] = #40000 1'b0;
	numIn[1] = #200000 1'b1;
	numIn[1] = #20000 1'b0;
	numIn[1] = #80000 1'b1;
	numIn[1] = #20000 1'b0;
	numIn[1] = #100000 1'b1;
	numIn[1] = #40000 1'b0;
	numIn[1] = #80000 1'b1;
	numIn[1] = #40000 1'b0;
end 
// numIn[ 0 ]
initial
begin
	numIn[0] = 1'b0;
	numIn[0] = #10000 1'b1;
	numIn[0] = #20000 1'b0;
	numIn[0] = #90000 1'b1;
	numIn[0] = #40000 1'b0;
	numIn[0] = #240000 1'b1;
	numIn[0] = #40000 1'b0;
	numIn[0] = #200000 1'b1;
	numIn[0] = #40000 1'b0;
	numIn[0] = #80000 1'b1;
	numIn[0] = #20000 1'b0;
end 
// op[ 2 ]
initial
begin
	op[2] = 1'b0;
	op[2] = #800000 1'b1;
	op[2] = #20000 1'b0;
end 
// op[ 1 ]
initial
begin
	op[1] = 1'b0;
	op[1] = #30000 1'b1;
	op[1] = #20000 1'b0;
	op[1] = #20000 1'b1;
	op[1] = #20000 1'b0;
	op[1] = #350000 1'b1;
	op[1] = #20000 1'b0;
	op[1] = #100000 1'b1;
	op[1] = #20000 1'b0;
	op[1] = #100000 1'b1;
	op[1] = #20000 1'b0;
	op[1] = #100000 1'b1;
	op[1] = #20000 1'b0;
end 
// op[ 0 ]
initial
begin
	op[0] = 1'b0;
	op[0] = #70000 1'b1;
	op[0] = #20000 1'b0;
	op[0] = #130000 1'b1;
	op[0] = #20000 1'b0;
end 

project3_vlg_sample_tst tb_sample (
	.c(c),
	.clk(clk),
	.numIn(numIn),
	.op(op),
	.rst(rst),
	.sampler_tx(sampler)
);

project3_vlg_check_tst tb_out(
	.Disp0(Disp0),
	.Disp1(Disp1),
	.Disp2(Disp2),
	.led(led),
	.stateCode(stateCode),
	.sampler_rx(sampler)
);
endmodule

